{
    "name": "TOML",
    "scopeName": "source.toml",
    "fileTypes": [
        "toml",
        "tml"
    ],
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#tables"
        },
        {
            "include": "#keys"
        },
        {
            "include": "#illegal"
        }
    ],
    "repository": {
        "array": {
            "begin": "(?<!\\w)(\\[)\\s*",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.array.toml"
                }
            },
            "comment": "Array",
            "end": "\\s*(\\])(?!\\w)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.array.toml"
                }
            },
            "patterns": [
                {
                    "include": "#comments"
                },
                {
                    "include": "#dataTypes"
                }
            ]
        },
        "boolean": {
            "captures": {
                "1": {
                    "name": "constant.other.boolean.toml"
                }
            },
            "comment": "Boolean",
            "match": "(?<!\\w)(true|false)(?!\\w)"
        },
        "comments": {
            "captures": {
                "1": {
                    "name": "comment.line.number-sign.toml"
                },
                "2": {
                    "name": "punctuation.definition.comment.toml"
                }
            },
            "comment": "Comments",
            "match": "\\s*((#).*)$"
        },
        "dataTypes": {
            "patterns": [
                {
                    "include": "#inlinetable"
                },
                {
                    "include": "#array"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#dateTime"
                },
                {
                    "include": "#float"
                },
                {
                    "include": "#integer"
                },
                {
                    "include": "#boolean"
                }
            ]
        },
        "dateTime": {
            "captures": {
                "1": {
                    "name": "constant.other.datetime.toml"
                }
            },
            "comment": "DateTime",
            "match": "(?<!\\w)(\\d{4}\\-\\d{2}\\-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[\\+\\-]\\d{2}:\\d{2}))(?!\\w)"
        },
        "float": {
            "captures": {
                "1": {
                    "name": "constant.numeric.float.toml"
                }
            },
            "comment": "Float, decimal and exponential representation",
            "match": "(?<!\\w)([\\+\\-]?(?:[1-9][0-9]*|0)(?:(?:\\.[0-9]*)?[eE][\\+\\-]?[1-9][0-9]*|(?:\\.[0-9]*)))(?!\\w)"
        },
        "illegal": {
            "captures": {
                "1": {
                    "name": "invalid.illegal.toml"
                }
            },
            "comment": "Invalid things -> everything unmatched",
            "match": "(.*)"
        },
        "inlinetable": {
            "begin": "(?<!\\w)(\\{)\\s*",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.definition.inlinetable.toml"
                }
            },
            "end": "\\s*(\\})(?!\\w)",
            "endCaptures": {
                "1": {
                    "name": "punctuation.definition.inlinetable.toml"
                }
            },
            "patterns": [
                {
                    "include": "#keys"
                },
                {
                    "include": "#dataTypes"
                }
            ]
        },
        "integer": {
            "captures": {
                "1": {
                    "name": "constant.numeric.integer.toml"
                }
            },
            "comment": "Integer (with and without + and - prefixes)",
            "match": "(?<!\\w)((?:[\\+\\-]?[1-9][0-9]*|0))(?!\\w)"
        },
        "keys": {
            "comment": "Key-value-pairs",
            "patterns": [
                {
                    "comment": "Assignments without key are invalid",
                    "match": "(\\s*=.*)$",
                    "name": "invalid.illegal.noKeyDefined.toml"
                },
                {
                    "comment": "Assignments without value are unusual",
                    "match": "(\\s*[A-Za-z_\\-][A-Za-z0-9_\\-]*\\s*=)(?=\\s*$)",
                    "name": "invalid.deprecated.noValueGiven.toml"
                },
                {
                    "begin": "\\s*([A-Za-z_-][A-Za-z0-9_-]*|\".+\"|'.+'|[0-9]+)\\s*(=)\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "keyword.key.toml"
                        },
                        "2": {
                            "name": "punctuation.definition.keyValuePair.toml"
                        }
                    },
                    "end": "($|(?==)|\\,|\\s*\\})",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#dataTypes"
                        },
                        {
                            "include": "#illegal"
                        }
                    ]
                }
            ]
        },
        "string": {
            "patterns": [
                {
                    "begin": "'''",
                    "comment": "literal string block (no escape sequences)",
                    "end": "'''",
                    "name": "string.quoted.triple.literal.block.toml"
                },
                {
                    "comment": "literal string line (no escape sequences)",
                    "match": "'.*?'",
                    "name": "string.quoted.single.literal.line.toml"
                },
                {
                    "begin": "\"\"\"",
                    "comment": "basic string block",
                    "end": "\"\"\"",
                    "name": "string.quoted.triple.basic.block.toml",
                    "patterns": [
                        {
                            "match": "[^\"\\\\]*(?:\\\\.?[^\"\\\\]*)*",
                            "name": "string.quoted.triple.basic.block.toml"
                        }
                    ]
                },
                {
                    "comment": "basic string line",
                    "match": "\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\"",
                    "name": "string.quoted.single.basic.line.toml"
                }
            ]
        },
        "tables": {
            "patterns": [
                {
                    "begin": "^\\s*(\\[\\[\\]\\]|\\[\\[\\..*\\]\\]|\\[\\[.*\\.\\]\\]|\\[\\[.*\\.\\..*\\]\\]|\\[\\[.*[\\[\\]#].*\\]\\]|\\[\\[.*\\]\\].+\\n)",
                    "comment": "non-empty etc. like tables, see below!",
                    "end": "(?=^\\s*\\[?\\[.*\\]\\]?)",
                    "name": "invalid.illegal.table.array.toml"
                },
                {
                    "begin": "^\\s*(\\[\\[)([A-Za-z_\\-][A-Za-z0-9_\\-\\.]*)(\\]\\])\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.table.array.toml"
                        },
                        "2": {
                            "name": "entity.other.attribute-name.table.array.toml"
                        },
                        "3": {
                            "name": "punctuation.definition.table.array.toml"
                        }
                    },
                    "comment": "A named TOML-Table-Array",
                    "end": "(?=^\\s*\\[?\\[[A-Za-z_\\-][A-Za-z0-9_\\-\\.]*\\]\\]?)",
                    "name": "meta.tag.table.array.toml",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keys"
                        },
                        {
                            "include": "#illegal"
                        }
                    ]
                },
                {
                    "begin": "^\\s*(\\[\\]|\\[\\..*\\]|\\[.*\\.\\]|\\[.*\\.\\..*\\]|\\[.*[\\[\\]#].*\\]|\\[.*\\].+\\n)",
                    "comment": "Each table name segment must be non-empty, must not contain the characters '[', ']' or '#' and is delimited by a '.'.  Tables \"appear in square brackets *on a line by themselves*\"",
                    "end": "(?=^\\s*\\[?\\[.*\\]\\]?)",
                    "name": "invalid.illegal.table.toml"
                },
                {
                    "begin": "^\\s*(\\[)([A-Za-z_\\-][A-Za-z0-9_\\-\\.]*)(\\])\\s*",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.definition.table.toml"
                        },
                        "2": {
                            "name": "entity.other.attribute-name.table.toml"
                        },
                        "3": {
                            "name": "punctuation.definition.table.toml"
                        }
                    },
                    "comment": "A named TOML-Table",
                    "end": "(?=^\\s*\\[?\\[[A-Za-z_\\-][A-Za-z0-9_\\-\\.]*\\]\\]?)",
                    "name": "meta.tag.table.toml",
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#keys"
                        },
                        {
                            "include": "#illegal"
                        }
                    ]
                }
            ]
        }
    }
}
